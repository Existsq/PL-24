import asyncio
import logging
import sys
import random
from os import getenv

import asyncpg
from aiogram import Bot, Dispatcher, html
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
TOKEN = getenv("BOT_TOKEN")
DATABASE_URL = getenv("DATABASE_URL")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
dp = Dispatcher()

# –ó–∞—Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
tasks = {
    "–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": [
        "–°–¥–µ–ª–∞–π 10 –æ—Ç–∂–∏–º–∞–Ω–∏–π üí™",
        "–ü—Ä–æ–π–¥–∏ 5000 —à–∞–≥–æ–≤ üö∂‚Äç‚ôÇÔ∏è",
        "–°–¥–µ–ª–∞–π –ø–ª–∞–Ω–∫—É –Ω–∞ 1 –º–∏–Ω—É—Ç—É ‚è≥"
    ],
    "–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ": [
        "–ü—Ä–æ—á–∏—Ç–∞–π –æ–¥–Ω—É –≥–ª–∞–≤—É –∫–Ω–∏–≥–∏ üìö",
        "–í—ã—É—á–∏ 5 –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –Ω–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ üåè",
        "–ù–∞–ø–∏—à–∏ —Å–≤–æ–∏ —Ü–µ–ª–∏ –Ω–∞ –º–µ—Å—è—Ü üìÉ"
    ],
    "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ": [
        "–°–¥–µ–ª–∞–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –∫–æ–º—É-–Ω–∏–±—É–¥—å üòä",
        "–ü–æ–∑–≤–æ–Ω–∏ –¥—Ä—É–≥—É –∏ –ø–æ–≥–æ–≤–æ—Ä–∏ —Å –Ω–∏–º üìû",
        "–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–º—É –∑–Ω–∞–∫–æ–º–æ–º—É üí¨"
    ]
}


async def init_db():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç.
    """
    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute('''
        CREATE TABLE IF NOT EXISTS user_stats (
            user_id BIGINT PRIMARY KEY,
            full_name TEXT,
            completed_tasks INT DEFAULT 0
        );
    ''')
    await conn.close()


async def update_user_stats(user_id: int, full_name: str):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É–≤–µ–ª–∏—á–∏–≤–∞—è —Å—á—ë—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.
    """
    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute('''
        INSERT INTO user_stats (user_id, full_name, completed_tasks)
        VALUES ($1, $2, 1)
        ON CONFLICT (user_id)
        DO UPDATE SET completed_tasks = user_stats.completed_tasks + 1;
    ''', user_id, full_name)
    await conn.close()


async def get_user_rank(user_id: int):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    conn = await asyncpg.connect(DATABASE_URL)
    rank = await conn.fetchval('''
        SELECT COUNT(*) + 1 FROM user_stats
        WHERE completed_tasks > (SELECT completed_tasks FROM user_stats WHERE user_id = $1);
    ''', user_id)
    await conn.close()
    return rank


async def get_top_users(limit=10):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.
    """
    conn = await asyncpg.connect(DATABASE_URL)
    rows = await conn.fetch('''
        SELECT full_name, completed_tasks FROM user_stats
        ORDER BY completed_tasks DESC LIMIT $1;
    ''', limit)
    await conn.close()
    return rows


def main_menu_keyboard():
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π.
    """
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="category_–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")],
        [InlineKeyboardButton(text="–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ", callback_data="category_–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ")],
        [InlineKeyboardButton(text="–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ", callback_data="category_–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ")],
        [InlineKeyboardButton(text="–ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥ üèÖ", callback_data="my_rank")],
        [InlineKeyboardButton(text="–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üèÜ", callback_data="top_users")]
    ])


@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–¥–∞–Ω–∏—è.
    """
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {html.bold(message.from_user.full_name)}! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–¥–∞–Ω–∏—è:",
                         reply_markup=main_menu_keyboard())


@dp.callback_query(lambda callback_query: callback_query.data.startswith("category_"))
async def category_task_callback(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏—è.
    """
    category = callback_query.data.split("_")[1]
    task = random.choice(tasks[category])

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update_user_stats(callback_query.from_user.id, callback_query.from_user.full_name)

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ–ø—Ü–∏–µ–π –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    task_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data=f"category_{category}")],
        [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"category_{category}")],
        [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

    await callback_query.message.answer(f"–¢–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':\n{task}", reply_markup=task_keyboard)
    await callback_query.answer()


@dp.callback_query(lambda callback_query: callback_query.data == "my_rank")
async def my_rank_callback(callback_query: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    rank = await get_user_rank(callback_query.from_user.id)
    await callback_query.message.answer(
        f"–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {rank}. –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–≤—ã—Å–∏—Ç—å –µ–≥–æ! üèÖ")
    await callback_query.answer()


@dp.callback_query(lambda callback_query: callback_query.data == "top_users")
async def top_users_callback(callback_query: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.
    """
    top_users = await get_top_users()
    top_text = "\n".join(
        [f"{idx + 1}. {user['full_name']} ‚Äî {user['completed_tasks']} –∑–∞–¥–∞–Ω–∏–π" for idx, user in enumerate(top_users)])
    await callback_query.message.answer(f"üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n{top_text}")
    await callback_query.answer()

@dp.callback_query(lambda callback_query: callback_query.data == "main_menu")
async def main_menu_callback(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–¥–∞–Ω–∏—è:", reply_markup=main_menu_keyboard())
    await callback_query.answer()


async def main() -> None:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await init_db()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ —Å HTML —Ä–µ–∂–∏–º–æ–º –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
